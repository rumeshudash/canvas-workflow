{"version":3,"sources":["../../src/Utils/common.utils.tsx","../../src/Utils/draggable.utils.tsx","../../src/Utils/canvas.utils.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["logTag","log","message","console","isDragging","dragCompIndex","offset","x","y","onMouseDown","cwComponents","revComponents","canvasEvent","getCanvasEvent","comp","rectCollision","length","arr","index","reversedIndexOf","canvasDOM","onMouseMove","cwRender","onMouseUp","rect","canvasRect","event","top","canvasDefaultData","height","background","hoverColor","strokeColor","lineWidth","fontSize","fontFamily","canvasData","InitCanvas","parent","canvas","data","parentDOM","ctx","canvasRender","RegisterDraggable","window","DestroyCanvas","debouncRender","func","timeout","args","timer","debounce","parentDim","setCanvasBG","renderComponents","component","drawBoxComponent","mode","defaultData","useState","cwMode","setCwMode","cwData","setCwData","canvasRef","createRef","parentRef","useEffect","className","React","ref","onClick","randomX","Math","randomY","type","w","h","fillColor","text","components","App","setData","onDataChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f672c105.chunk.js","sourcesContent":["/**\n * Log tag.\n */\nconst logTag = 'CanvasWorkflow:';\n\n/**\n * Debounce the given function.\n * \n * @param func Function.\n * @param timeout Timeout in ms.\n * @returns Function.\n */\nexport function debounce(func: Function, timeout = 300){\n    let timer: number;\n    return (...args: any[]) => {\n        window.clearTimeout(timer);\n        timer = window.setTimeout(() => { func.apply(this, args); }, timeout);\n    };\n}\n\nexport const reversedIndexOf = function( arr: any[], item: any){\n    const { length } = arr;\n    const index = arr.indexOf(item);\n    if(index === -1){\n       return -1;\n    };\n    return length - index - 1;\n};\n\n/**\n * Custom Log with tag.\n * \n * @param message Any values to log.\n */\nexport const log = ( ...message: any[] ) => {\n    console.log( logTag, ...message );\n}\n","import { BoxComponent, CanvasComponent } from \"../Dtos/canvas.dtos\";\nimport { log, reversedIndexOf } from \"./common.utils\";\n\nlet cwComponents: CanvasComponent[];\nlet canvasDOM: HTMLCanvasElement;\nlet cwRender: Function;\n\nlet isDragging = false;\nlet dragCompIndex = -1;\nlet offset = {x: 0, y: 0};\n\nexport const RegisterDraggable = ( canvas: HTMLCanvasElement, components: CanvasComponent[], render: Function ) => {\n    cwComponents = components;\n    canvasDOM = canvas;\n    cwRender = render;\n    canvasDOM.addEventListener('mousedown', onMouseDown );\n}\n\nexport const DestroyDraggable = () => {\n    if( canvasDOM ) {\n        canvasDOM.removeEventListener('mousedown', onMouseDown );\n    }\n}\n\nconst onMouseDown = ( event: MouseEvent ) => {\n    if( ! cwComponents.length ) return;\n\n    const revComponents = [ ...cwComponents ].reverse();\n    const canvasEvent = getCanvasEvent( event );\n    // revComponents.reverse();\n    revComponents.map( ( comp ) => {\n        if( ! isDragging && comp.type === 'box' \n            && rectCollision(canvasEvent.x, canvasEvent.y, comp as BoxComponent )  \n        ) {\n            isDragging = true;\n            dragCompIndex = reversedIndexOf( revComponents, comp );\n            offset.x = canvasEvent.x - comp.x;\n            offset.y = canvasEvent.y - comp.y;\n\n            canvasDOM.addEventListener('mousemove', onMouseMove );\n            canvasDOM.addEventListener('mouseup', onMouseUp );\n\n            return;\n        }\n    } )\n}\n\nconst onMouseMove = ( event: MouseEvent ) => {\n    if( dragCompIndex !== -1 ) {\n        const canvasEvent = getCanvasEvent( event );\n\n        cwComponents[dragCompIndex].x = canvasEvent.x - offset.x;\n        cwComponents[dragCompIndex].y = canvasEvent.y - offset.y;\n        cwRender();\n    }\n}\n\nconst onMouseUp = () => {\n    isDragging = false;\n    dragCompIndex = -1;\n    canvasDOM.removeEventListener('mousemove', onMouseMove );\n    canvasDOM.removeEventListener('mouseup', onMouseUp );\n}\n\nconst rectCollision = ( x: number, y: number, rect: BoxComponent ) => {\n    if(\n        rect.x > 0 && x > rect.x\n        && rect.y > 0 && y > rect.y\n        && x < ( rect.w + rect.x )\n        && y < ( rect.h + rect.y )\n    ) {\n        log('Collision: ', rect.text);\n        return true;\n    }\n    return false;\n}\n\nconst getCanvasEvent = ( event: MouseEvent ): { x: number, y: number} => {\n    const canvasRect = canvasDOM.getBoundingClientRect();\n    return { x: event.clientX - canvasRect.left, y: event.clientY - canvasRect.top }\n}","import { BoxComponent, CanvasComponent, CanvasData } from \"../Dtos/canvas.dtos\";\nimport { debounce, log } from \"./common.utils\";\nimport { DestroyDraggable, RegisterDraggable } from \"./draggable.utils\";\nimport { TimeLogger } from \"./timeLogger.utils\";\n\nlet debug = process.env.NODE_ENV === 'development';\n\nlet parentDOM: HTMLDivElement;\nlet canvasDOM: HTMLCanvasElement;\nlet ctx: CanvasRenderingContext2D | null;\nlet cwMode: 'editor' | 'viewer';\n\nlet canvasDefaultData = {\n    height: 500,\n    background: '#eeeeee',\n    hoverColor: '#0000ff',\n    strokeColor: '#000000',\n    lineWidth: 1,\n    fontSize: 16,\n    fontFamily: 'Arial',\n}\n\nlet canvasData: CanvasData = {}\n\ninterface InitCanvasProps {\n    parent: HTMLDivElement,\n    canvas: HTMLCanvasElement,\n    mode?: 'editor' | 'viewer',\n    data?: CanvasData,\n}\n\n/**\n * Initialize Canvas.\n * \n * @param parent Parent DOM.\n * @param canvas Main Canvas DOM.\n * @param mode Mode of canvas workflow.\n * @param data Canvas Data. \n */\nexport const InitCanvas = (\n    { \n        parent,\n        canvas,\n        mode,\n        data,\n    } : InitCanvasProps\n) => {\n    parentDOM = parent;\n    canvasDOM = canvas;\n    cwMode = mode || 'editor';\n\n    ctx = canvas.getContext(\"2d\");\n\n    if( data ) {\n        canvasData = data;\n    }\n    \n    canvasRender();\n    if( canvasData?.components?.length ) {\n        RegisterDraggable( canvasDOM, canvasData.components, canvasRender );\n    }\n    window.addEventListener( 'resize', debouncRender );\n}\n\n/**\n * Destroy the canvas events.\n */\nexport const DestroyCanvas = () => {\n    window.removeEventListener( 'resize', debouncRender );\n    DestroyDraggable();\n    if( debug ) {\n        log('Canvas Destroyed');\n    }\n}\n\n/**\n * Clear Canvas.\n */\nexport const ClearCanvas = () => {\n    if( canvasDOM && ctx ) {\n        ctx.clearRect(0, 0, canvasDOM.width, canvasDOM.height);\n        log('Canvas Cleared!');\n    }\n}\n\n/**\n * Debounce the render function for performance optimization.\n */\nconst debouncRender = debounce( () => canvasRender() );\n\n/**\n * Main render function for canvas.\n */\nconst canvasRender = ( ) => {\n    if( parentDOM && canvasDOM && ctx ) {\n        let parentDim = parentDOM.getBoundingClientRect();\n        canvasDOM.width = parentDim.width;\n        canvasDOM.height = canvasData.height || canvasDefaultData.height;\n    \n        ClearCanvas();\n    \n        if( debug ) {\n            log('Rendering...');\n            log('Data:', {canvasData, canvasDefaultData} );\n            TimeLogger.start();\n        }\n        \n        setCanvasBG();\n\n        if( canvasData?.components ) {\n            canvasData.components.forEach( ( component ) => {\n                renderComponents(component);\n            } );\n        }\n            \n        if( debug ) {\n            TimeLogger.stop('Render');\n            log('Render Completed');\n        }\n    }\n}\n\n/**\n * Fill background of canvas.\n */\nconst setCanvasBG = () => {\n    if( canvasDOM && ctx ) {\n        // ctx.imageSmoothingEnabled = true;\n        ctx.translate(0.5, 0.5);\n        ctx.fillStyle = canvasData.background || canvasDefaultData.background;\n        ctx.fillRect(0, 0, canvasDOM.width, canvasDOM.height);\n    }\n}\n\n/**\n * Render component in canvas.\n * @param component Canvas Component\n */\nconst renderComponents = ( component: CanvasComponent ) => {\n    processBaseComponent( component );\n    switch( component.type ) {\n        case 'box':\n            drawBoxComponent( component as BoxComponent );\n            break;\n    }\n}\n\n/**\n * Process Base of component.\n * \n * @param component Canvas Component.\n */\nconst processBaseComponent = ( component: CanvasComponent ) => {\n    // Register editor mode.\n    if( cwMode === 'editor' ) {\n        // Register draggable.\n        if( typeof component.draggable === 'undefined' || component.draggable ) {\n\n        }\n    }\n}\n\nconst drawBoxComponent = ( component: BoxComponent ) => {\n    if( ! ctx ) return;\n\n    // ctx.imageSmoothingEnabled = true;\n\n    const padding = 5;\n    const fontSize = component.fontSize || canvasDefaultData.fontSize;\n\n    ctx.save();\n    ctx.beginPath();\n    if( component.fillColor ) {\n        ctx.fillStyle = component.fillColor;\n        ctx.rect(component.x, component.y, component.w, component.h);\n        ctx.fill();\n    }\n\n    ctx.lineWidth = component.lineWidth || canvasDefaultData.lineWidth;\n    ctx.strokeStyle = component.strokeColor || canvasDefaultData.strokeColor;\n    ctx.rect(component.x, component.y, component.w, component.h);\n    ctx.stroke();\n    ctx.clip();\n\n    ctx.font = `${fontSize}px ${component.fontFamily}`;\n    ctx.fillStyle = component.textColor || canvasDefaultData.strokeColor;\n    ctx.fillText( \n        component.text, component.x + padding + ctx.lineWidth, \n        component.y + padding + fontSize + ctx.lineWidth - 5,\n    );\n    ctx.restore();\n}","import React, { createRef, useEffect, useState } from 'react'\nimport { BoxComponent, CanvasData } from './Dtos/canvas.dtos';\nimport './styles.scss'\nimport { DestroyCanvas, InitCanvas } from './Utils/canvas.utils';\nimport { log } from './Utils/common.utils';\n\ninterface Props {\n    mode?: 'editor' | 'viewer';\n    defaultData?: CanvasData;\n    data?: CanvasData;\n    onDataChange?( data: CanvasData ): void;\n}\n\nconst ConvasWorkflow = ({ mode = 'editor', defaultData, data, onDataChange }: Props) => {\n\n    const [cwMode, setCwMode] = useState(mode);\n    const [cwData, setCwData] = useState<CanvasData | undefined>(data || defaultData);\n\n    const canvasRef = createRef<HTMLCanvasElement>();\n    const parentRef = createRef<HTMLDivElement>();\n\n    useEffect(() => {\n        setCwMode(mode);\n        setCwData(data);\n    }, [mode, data])\n\n    useEffect(() => {\n        if( canvasRef.current && parentRef.current ) {\n            InitCanvas({\n                parent: parentRef.current,\n                canvas: canvasRef.current,\n                mode: cwMode,\n                data: cwData,\n            });\n        }\n\n        return () => {\n            DestroyCanvas();\n        }\n    }, [canvasRef, parentRef, cwMode, cwData ])\n\n    const addRandomBox = () => {\n        const randomX = Math.floor( Math.random() * ( canvasRef.current?.width || 100 ) );\n        const randomY = Math.floor( Math.random() * ( canvasRef.current?.height || 100 ) );\n        const comp: BoxComponent = {\n            type: 'box',\n            x: randomX,\n            y: randomY,\n            w: 100,\n            h: 100,\n            fillColor: 'green',\n            text: 'Random ' + randomX + ':' + randomY\n        }\n        setCwData( { ...cwData, components: [ ...cwData?.components || [], comp ] })\n    }\n\n    const clearAll = () => {\n        setCwData( { ...cwData, components: [] } );\n        log(cwData);\n    }\n\n    return (\n        <div className={`canvas-workflow`} >\n            <div className='cw-tools'>\n                <div className=''>\n                    <div>Tool Box</div>\n                </div>\n            </div>\n            <div className='cw-wrapper' ref={parentRef}>\n                <canvas ref={canvasRef}></canvas>\n            </div>\n            <div className='cw-settings' onClick={()=>setCwMode('viewer')}>\n                <div>settings</div>\n                <button onClick={addRandomBox}>Add Random Box</button>\n                <button onClick={clearAll}>Clear All</button>\n            </div>\n        </div>\n    )\n}\n\nexport default ConvasWorkflow;","import React, { useEffect, useState } from 'react'\n\nimport CanvasWorkflow from 'canvas-workflow'\nimport { CanvasData } from 'canvas-workflow/dist/Dtos/canvas.dtos'\nimport 'canvas-workflow/dist/index.css'\n\nconst App = () => {\n    const [data, setData] = useState<CanvasData>();\n\n    useEffect(() => {\n        setData({\n            components:[\n                { \n                    type: 'box',\n                    text: 'Rumesh',\n                    x: 10, \n                    y: 10,\n                    w: 100, \n                    h: 100,\n                    fillColor: 'red',\n                    strokeColor: 'green',\n                    lineWidth: 1,\n                }\n            ]\n        })\n    }, [])\n\n    const dataChangeHandle = ( data: CanvasData ) => {\n        setData( data );\n    }\n\n    return (\n        <div>\n            <CanvasWorkflow mode='editor' data={data} onDataChange={dataChangeHandle} />\n            {/* <CanvasWorkflow mode='viewer' /> */}\n        </div>\n    )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}